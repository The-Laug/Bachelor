import "SimpleSumProgram_summationDomain.vpr"



method sum(n: Int) returns (res: Int)
  requires 0 <= n
  ensures res == n * (n + 1) / 2
{
  res := 0
  var i: Int := 0;

  while (i <= n)
    invariant i <= (n + 1)
    invariant res == (i - 1) * i / 2
  {
    res := res + i
    i := i + 1
  }
  assert i <= (n+1)
}




method sum_one_to_n(n: Int) returns (res: Int)
    requires 0 <= n
    ensures res == simplesum(0, n) // 0 + 1 + 2 + ... + n
{    
    res := 0
    var i: Int := 0
    while (i <= n)
        invariant 0 <= i
        invariant i <= n + 1
        invariant res == simplesum(0, i-1)
    {
        res := res + i
        i := i + 1
    }
}
