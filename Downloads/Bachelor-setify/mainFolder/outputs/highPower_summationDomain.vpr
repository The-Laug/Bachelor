
domain powerSumDomain2 {
// uninterpreted function
function powerSum2(i: Int, N: Int): Int

axiom emptyPowerSum2{
    powerSum2(0,0) == 0
}

axiom iGreaterThanNPowerSum2 {
    forall i:Int, N:Int::
        i > N ==> powerSum2(i,N) == 0
}

axiom rightRecursionPowerSum2 {
    forall i:Int, N: Int :: 
        0 <= i < N ==> powerSum2(i,N) == powerSum2(i,N-1) + N*N
}

axiom leftRecursionPowerSum2 {
    forall i:Int, N: Int :: 
        0 <= i < N ==> powerSum2(i,N) == i*i + powerSum2(i+1,N)
}

axiom positiveTermsPowerSum2  {
    forall  i:Int, N: Int :: 
        0 <= i < N ==> powerSum2(i,N) >= i*i
}

axiom largerIndexPowerSum2  {
    forall  i:Int, N: Int, N2: Int :: 
        0 <= i < N < N2 ==> powerSum2(i,N) <= powerSum2(i,N2)
}

axiom indexShiftOnZeroPowerSum2  {
    forall  i:Int, N: Int :: 
        i < 0 < N ==> powerSum2(i,N) == powerSum2(i,0) + powerSum2(0,N)
}

}





domain powerSumDomain3 {
// uninterpreted function
function powerSum3(i: Int, N: Int): Int

axiom emptyPowerSum3{
    powerSum3(0,0) == 0
}

axiom iGreaterThanNPowerSum3 {
    forall i:Int, N:Int::
        i > N ==> powerSum3(i,N) == 0
}

axiom rightRecursionPowerSum3 {
    forall i:Int, N: Int :: 
        0 <= i < N ==> powerSum3(i,N) == powerSum3(i,N-1) + N*N*N
}

axiom leftRecursionPowerSum3 {
    forall i:Int, N: Int :: 
        0 <= i < N ==> powerSum3(i,N) == i*i*i + powerSum3(i+1,N)
}

axiom positiveTermsPowerSum3  {
    forall  i:Int, N: Int :: 
        0 <= i < N ==> powerSum3(i,N) >= i*i*i
}

axiom largerIndexPowerSum3  {
    forall  i:Int, N: Int, N2: Int :: 
        0 <= i < N < N2 ==> powerSum3(i,N) <= powerSum3(i,N2)
}

axiom indexShiftOnZeroPowerSum3  {
    forall  i:Int, N: Int :: 
        i < 0 < N ==> powerSum3(i,N) == powerSum3(i,0) + powerSum3(0,N)
}

}





domain genericSumj0 {
    // uninterpreted function
    function genericSum0( lowerBound:Int, upperBound:Int) : Int

axiom emptyGenericSum0{
    genericSum0(0,0) == 0
}

axiom iGreaterThanNGenericSum0 {
    forall i:Int, N:Int::
        i > N ==> genericSum0(i,N) == 0
}
}
// axiom rightRecursionGenericSum0 {
//     forall i:Int, N: Int :: 
//         0 <= i <= N ==> genericSum0(i,N) == genericSum0(i,N-1) + sin(N
// }

// axiom leftRecursionGenericSum0 {
//     forall i:Int, N: Int :: 
//         0 <= i <= N ==> genericSum0(i,N) == sin(i + genericSum0(i+1,N)
// }

//     }
    
    
    
    

