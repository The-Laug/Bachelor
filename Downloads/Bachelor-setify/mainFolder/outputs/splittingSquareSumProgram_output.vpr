import "splittingSquareSumProgram_summationDomain.vpr"
method splittingSquareSum(n: Int) returns (res: Int,res2: Int,res3: Int)
    requires 0 <= n  
    ensures res3 == res + res2
{    
    res := 0
    var i: Int := 0
    res2 := 0
    var i2: Int := 0
    res3 := 0
    var i3: Int := 0
    while (i <= n)
        invariant 0 <= i
        invariant i <= n + 1
        invariant res == powerSum2(0,i-1)
    {
        res := res + i*i
        i := i + 1
    }
    while (i2 <= n)
        invariant 0 <= i2
        invariant i2 <= n + 1
        invariant res2 == powerSum2(0,i2-1)
    {
        res2 := res2 + i2*i2
        i2 := i2 + 1
    }
    while (i3 <= n)
        invariant 0 <= i3
        invariant i3 <= n + 1
        invariant res3 == powerSum2(0,i3-1) + powerSum2(0,i3-1)
    {
        res3 := res3 + i3*i3 + i3*i3
        i3 := i3 + 1
    }
    assert res + res2 == res3

}
