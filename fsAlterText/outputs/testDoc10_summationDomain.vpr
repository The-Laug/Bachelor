
domain genericSumj0 {
    // uninterpreted function
    function genericSum0( lowerBound:Int, upperBound:Int) : Int

axiom emptyGenericSum0{
    genericSum0(0,0) == 0
}

axiom iGreaterThanNGenericSum0 {
    forall i:Int, N:Int::
        i > N ==> genericSum0(i,N) == 0
}
}


domain simpleSums {
// uninterpreted function
function simplesum(i: Int, N: Int): Int

axiom emptySum {
    simplesum(0,0) == 0
}

axiom iGreaterThanN  {
    forall i:Int, N:Int::
        i > N ==> simplesum(i,N) == 0
}

axiom rightRecursion  {
    forall i:Int, N: Int :: 
        0 <= i < N ==> simplesum(i,N) == simplesum(i,N-1) + N
}

axiom leftRecursion  {
    forall i:Int, N: Int :: 
        0 <= i < N ==> simplesum(i,N) == i + simplesum(i+1,N)
}


}





domain setifysimpleSum {
    // uninterpreted function
    function setifySumsimpleSum(lowerBound:Int, upperBound:Int) : Multiset[Int]

    axiom setifyInSetsimpleSum {
        forall lowerBound:Int,upperBound: Int, j: Int ::
            lowerBound<= j <=upperBound ==> (j in setifySumsimpleSum(lowerBound,upperBound))>=1
    }
    
    axiom setifyNotInSetsimpleSum {
        forall lowerBound:Int,upperBound: Int, j : Int ::
            j < lowerBound || j > upperBound ==> !( (j in setifySumsimpleSum(lowerBound,upperBound))>=1 )
    }

    }
    
    
    
    
    

domain powerSumDomain2 {
// uninterpreted function
function powerSum2(i: Int, N: Int): Int

axiom emptyPowerSum2{
    powerSum2(0,0) == 0
}

axiom iGreaterThanNPowerSum2 {
    forall i:Int, N:Int::
        i > N ==> powerSum2(i,N) == 0
}

axiom rightRecursionPowerSum2 {
    forall i:Int, N: Int :: 
        0 <= i < N ==> powerSum2(i,N) == powerSum2(i,N-1) + N*N
}

axiom leftRecursionPowerSum2 {
    forall i:Int, N: Int :: 
        0 <= i < N ==> powerSum2(i,N) == i*i + powerSum2(i+1,N)
}
}





domain setifysimpleSum1 {
    // uninterpreted function
    function setifySumsimpleSum1(lowerBound:Int, upperBound:Int) : Multiset[Int]

    axiom setifyInSetsimpleSum1 {
        forall lowerBound:Int,upperBound: Int, j: Int ::
            lowerBound<= j <=upperBound ==> (j in setifySumsimpleSum1(lowerBound,upperBound))>=1
    }
    
    axiom setifyNotInSetsimpleSum1 {
        forall lowerBound:Int,upperBound: Int, j : Int ::
            j < lowerBound || j > upperBound ==> !( (j in setifySumsimpleSum1(lowerBound,upperBound))>=1 )
    }

    }
    
    
    
    
    

domain setifyconstantSum2 {
    // uninterpreted function
    function setifySumconstantSum2(lowerBound:Int, upperBound:Int) : Multiset[Int]

    axiom setifyInSetconstantSum2 {
        forall lowerBound:Int,upperBound: Int, j: Int ::
            lowerBound<= j <=upperBound ==> (2 in setifySumconstantSum2(lowerBound,upperBound))>=1
    }
    
    axiom setifyNotInSetconstantSum2 {
        forall lowerBound:Int,upperBound: Int, j : Int ::
            j < lowerBound || j > upperBound ==> !( (2 in setifySumconstantSum2(lowerBound,upperBound))>=1 )
    }

    }
    
    
    
    
    

domain setifyconstantSum3 {
    // uninterpreted function
    function setifySumconstantSum3(lowerBound:Int, upperBound:Int) : Multiset[Int]

    axiom setifyInSetconstantSum3 {
        forall lowerBound:Int,upperBound: Int, j: Int ::
            lowerBound<= j <=upperBound ==> (2 in setifySumconstantSum3(lowerBound,upperBound))>=1
    }
    
    axiom setifyNotInSetconstantSum3 {
        forall lowerBound:Int,upperBound: Int, j : Int ::
            j < lowerBound || j > upperBound ==> !( (2 in setifySumconstantSum3(lowerBound,upperBound))>=1 )
    }

    }
    
    
    
    
    

domain setifyconstantSum4 {
    // uninterpreted function
    function setifySumconstantSum4(lowerBound:Int, upperBound:Int) : Multiset[Int]

    axiom setifyInSetconstantSum4 {
        forall lowerBound:Int,upperBound: Int, j: Int ::
            lowerBound<= j <=upperBound ==> (2 in setifySumconstantSum4(lowerBound,upperBound))>=1
    }
    
    axiom setifyNotInSetconstantSum4 {
        forall lowerBound:Int,upperBound: Int, j : Int ::
            j < lowerBound || j > upperBound ==> !( (2 in setifySumconstantSum4(lowerBound,upperBound))>=1 )
    }

    }
    
    
    
    
    

domain setifyconstantSum5 {
    // uninterpreted function
    function setifySumconstantSum5(lowerBound:Int, upperBound:Int) : Multiset[Int]

    axiom setifyInSetconstantSum5 {
        forall lowerBound:Int,upperBound: Int, j: Int ::
            lowerBound<= j <=upperBound ==> (2 in setifySumconstantSum5(lowerBound,upperBound))>=1
    }
    
    axiom setifyNotInSetconstantSum5 {
        forall lowerBound:Int,upperBound: Int, j : Int ::
            j < lowerBound || j > upperBound ==> !( (2 in setifySumconstantSum5(lowerBound,upperBound))>=1 )
    }

    }
    
    
    
    
    

domain setifypower2Sum6 {
    // uninterpreted function
    function setifySumpower2Sum6(lowerBound:Int, upperBound:Int) : Multiset[Int]

    axiom setifyInSetpower2Sum6 {
        forall lowerBound:Int,upperBound: Int, j: Int ::
            lowerBound<= j <=upperBound ==> (j*j in setifySumpower2Sum6(lowerBound,upperBound))>=1
    }
    
    axiom setifyNotInSetpower2Sum6 {
        forall lowerBound:Int,upperBound: Int, j : Int ::
            j < lowerBound || j > upperBound ==> !( (j*j in setifySumpower2Sum6(lowerBound,upperBound))>=1 )
    }

    }
    
    
    
    
    

domain genericSumj7 {
    // uninterpreted function
    function genericSum7( lowerBound:Int, upperBound:Int) : Int

axiom emptyGenericSum7{
    genericSum7(0,0) == 0
}

axiom iGreaterThanNGenericSum7 {
    forall i:Int, N:Int::
        i > N ==> genericSum7(i,N) == 0
}
}

