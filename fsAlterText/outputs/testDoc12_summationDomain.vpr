
domain powerSumDomain3 {
// uninterpreted function
function powerSum3(i: Int, N: Int): Int

axiom emptyPowerSum3{
    powerSum3(0,0) == 0
}

axiom iGreaterThanNPowerSum3 {
    forall i:Int, N:Int::
        i > N ==> powerSum3(i,N) == 0
}

axiom rightRecursionPowerSum3 {
    forall i:Int, N: Int :: 
        0 <= i < N ==> powerSum3(i,N) == powerSum3(i,N-1) + N*N*N
}

axiom leftRecursionPowerSum3 {
    forall i:Int, N: Int :: 
        0 <= i < N ==> powerSum3(i,N) == i*i*i + powerSum3(i+1,N)
}
}





domain genericSumn0 {
    // uninterpreted function
    function genericSum0( lowerBound:Int, upperBound:Int) : Int

axiom emptyGenericSum0{
    genericSum0(0,0) == 0
}

axiom iGreaterThanNGenericSum0 {
    forall i:Int, N:Int::
        i > N ==> genericSum0(i,N) == 0
}
}



domain genericSumn2 {
    // uninterpreted function
    function genericSum2( lowerBound:Int, upperBound:Int) : Int

axiom emptyGenericSum2{
    genericSum2(0,0) == 0
}

axiom iGreaterThanNGenericSum2 {
    forall i:Int, N:Int::
        i > N ==> genericSum2(i,N) == 0
}
}

