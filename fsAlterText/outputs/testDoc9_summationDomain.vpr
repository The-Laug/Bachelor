
domain simpleSums {
// uninterpreted function
function simplesum(i: Int, N: Int): Int

axiom emptySum {
    simplesum(0,0) == 0
}

axiom iGreaterThanN  {
    forall i:Int, N:Int::
        i > N ==> simplesum(i,N) == 0
}

axiom rightRecursion  {
    forall i:Int, N: Int :: 
        0 <= i < N ==> simplesum(i,N) == simplesum(i,N-1) + N
}

axiom leftRecursion  {
    forall i:Int, N: Int :: 
        0 <= i < N ==> simplesum(i,N) == i + simplesum(i+1,N)
}


}





domain setifysimpleSum {
    // uninterpreted function
    function setifySumsimpleSum( lowerBound:Int, upperBound:Int) : Set[Int]

    axiom setifyInSetsimpleSum {
        forall lowerBound:Int,upperBound: Int, j: Int ::
            lowerBound<= j <=upperBound ==> j in setifySumsimpleSum(lowerBound,upperBound)
    }
    
    axiom setifyNotInSetsimpleSum {
        forall lowerBound:Int,upperBound: Int, j : Int ::
            j < lowerBound || j > upperBound ==> !( j in setifySumsimpleSum(lowerBound,upperBound))
    }

    }
    
    
    
    
    

domain setifysimpleSum0 {
    // uninterpreted function
    function setifySumsimpleSum0( lowerBound:Int, upperBound:Int) : Set[Int]

    axiom setifyInSetsimpleSum0 {
        forall lowerBound:Int,upperBound: Int, j: Int ::
            lowerBound<= j <=upperBound ==> j in setifySumsimpleSum0(lowerBound,upperBound)
    }
    
    axiom setifyNotInSetsimpleSum0 {
        forall lowerBound:Int,upperBound: Int, j : Int ::
            j < lowerBound || j > upperBound ==> !( j in setifySumsimpleSum0(lowerBound,upperBound))
    }

    }
    
    
    
    
    

domain powerSumDomain2 {
// uninterpreted function
function powerSum2(i: Int, N: Int): Int

axiom emptyPowerSum2{
    powerSum2(0,0) == 0
}

axiom iGreaterThanNPowerSum2 {
    forall i:Int, N:Int::
        i > N ==> powerSum2(i,N) == 0
}

axiom rightRecursionPowerSum2 {
    forall i:Int, N: Int :: 
        0 <= i < N ==> powerSum2(i,N) == powerSum2(i,N-1) + N*N
}

axiom leftRecursionPowerSum2 {
    forall i:Int, N: Int :: 
        0 <= i < N ==> powerSum2(i,N) == i*i + powerSum2(i+1,N)
}
}





domain setifysimpleSum1 {
    // uninterpreted function
    function setifySumsimpleSum1( lowerBound:Int, upperBound:Int) : Set[Int]

    axiom setifyInSetsimpleSum1 {
        forall lowerBound:Int,upperBound: Int, j: Int ::
            lowerBound<= j <=upperBound ==> j in setifySumsimpleSum1(lowerBound,upperBound)
    }
    
    axiom setifyNotInSetsimpleSum1 {
        forall lowerBound:Int,upperBound: Int, j : Int ::
            j < lowerBound || j > upperBound ==> !( j in setifySumsimpleSum1(lowerBound,upperBound))
    }

    }
    
    
    
    
    

domain setifysimpleSum2 {
    // uninterpreted function
    function setifySumsimpleSum2( lowerBound:Int, upperBound:Int) : Set[Int]

    axiom setifyInSetsimpleSum2 {
        forall lowerBound:Int,upperBound: Int, j: Int ::
            lowerBound<= j <=upperBound ==> j in setifySumsimpleSum2(lowerBound,upperBound)
    }
    
    axiom setifyNotInSetsimpleSum2 {
        forall lowerBound:Int,upperBound: Int, j : Int ::
            j < lowerBound || j > upperBound ==> !( j in setifySumsimpleSum2(lowerBound,upperBound))
    }

    }
    
    
    
    
    

domain setifysimpleSum3 {
    // uninterpreted function
    function setifySumsimpleSum3( lowerBound:Int, upperBound:Int) : Set[Int]

    axiom setifyInSetsimpleSum3 {
        forall lowerBound:Int,upperBound: Int, j: Int ::
            lowerBound<= j <=upperBound ==> j in setifySumsimpleSum3(lowerBound,upperBound)
    }
    
    axiom setifyNotInSetsimpleSum3 {
        forall lowerBound:Int,upperBound: Int, j : Int ::
            j < lowerBound || j > upperBound ==> !( j in setifySumsimpleSum3(lowerBound,upperBound))
    }

    }
    
    
    
    
    

domain setifysimpleSum4 {
    // uninterpreted function
    function setifySumsimpleSum4( lowerBound:Int, upperBound:Int) : Set[Int]

    axiom setifyInSetsimpleSum4 {
        forall lowerBound:Int,upperBound: Int, j: Int ::
            lowerBound<= j <=upperBound ==> j in setifySumsimpleSum4(lowerBound,upperBound)
    }
    
    axiom setifyNotInSetsimpleSum4 {
        forall lowerBound:Int,upperBound: Int, j : Int ::
            j < lowerBound || j > upperBound ==> !( j in setifySumsimpleSum4(lowerBound,upperBound))
    }

    }
    
    
    
    
    
