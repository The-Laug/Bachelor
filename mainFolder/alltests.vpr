

method try(x:Int, y: Int) 
{
    var i: Int
    var N: Int

    assume 0 < i < N;
    // assert 2+2==3

    assert for j=i to 21 sum (2*N^2*j) == 231    

}

method try(x:Int, y: Int) 
{
    var i: Int
    var N: Int

    assume 0 < i < N;
    // assert 2+2==3

    // assert for j=0 to 2 sum (22333*j) == 2
    assert for j=0 to 58 sum (j^2) == 66729
    assert for j=0 to 21 sum (j+j+22*j^2-203*j^2) == 232  

}method try(x:Int, y: Int) 
{
    var i: Int
    var N: Int
    var j: Int

    assume 0 < i < N;

    // Simple linear summation
    assert for j=0 to 10 sum (j) == 55
    assert for j=1 to 5 sum (2*j) == 30

    // Polynomial summation
    assert for j=0 to 10 sum (j^2) == 385
    assert for j=1 to 5 sum (j^3) == 225

    // Complex inner function
    assert for j=0 to 5 sum (2*j + 3*j^2) == 225
    assert for j=1 to 3 sum (j^3 + 2*j + 1) == 26

    // Edge cases
    assert for j=5 to 5 sum (j) == 5
    assert for j=10 to 0 sum (j) == 0  // Empty summation

    // Negative coefficients
    assert for j=0 to 4 sum (j- 2*j^2) == -70

    // Trigonometric (if supported)
    // assert for j=0 to 2 sum (sin(j)) == sin(0) + sin(1) + sin(2)
}
method try(x:Int, y: Int) 
{
    var i: Int
    var N: Int

    assume 0 < i < N;

    // Summation with constants
    assert for j=0 to 4 sum (2) == 10
    assert for j=1 to 3 sum (5) == 15

    // Mixed terms
    assert for j=0 to 3 sum (j^2 + 3*j + 1) == 25
    assert for j=1 to 4 sum (4*j^2 - j + 2) == 82

    // Large bounds
    assert for j=0 to 100 sum (j) == 5050
    assert for j=0 to 50 sum (j^2) == 42925
    assert for j=0 to 8 sum (j^3) == 1296


    // Invalid assertion (for error handling)
    assert for j=0 to 5 sum (j) == 100  // Incorrect sum
}

method try() 
{
    var i: Int
    var N: Int
    var z: Int
    var x: Int
    var y: Int


    assume 0 < i < N;

    // Summation with constants
    assert for j=0 to 4 sum (4*z *  3*x + 1 - y^2+j) ==
    assert for j=0 to 4 sum (j^a) ==2

}

method try() 
{
    var i: Int
    var N: Int
    var z: Int
    var x: Int
    var y: Int


    assume 0 < i < N;

    // Summation with constants
    assert for j=0 to 4 sum (2*j) == for j=0 to 4 sum (j) * 2
    assert for j=0 to 4 sum (2*j) < for j=0 to 5 sum (j) * 2
    assert for j=0 to i sum (j) < for j=0 to i+2 sum (j)
    assert for j=0 to i sum (j^2) < for j=0 to i+2 sum (j^2)
    assert for j=i+2 to N sum (j^2) < for j=i to N sum (j^2)
    assert for j=0 to i+2 sum (j^2) < for j=0 to i sum (j^2) + (i+2)*(i+2) + (i+1)*(i+1)
    assert for j=0 to 5 sum (j) == for j=0 to 5 sum (5-j)
    assert for j=0 to i sum (j) == for j=0 to i sum (i-j)


    // assert false

}
