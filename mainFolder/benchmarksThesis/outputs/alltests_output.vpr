import "alltests_summationDomain.vpr"


method try(x:Int, y: Int) 
{
    var i: Int
    var N: Int

    assume 0 < i < N;
    // assert 2+2==3

    assert 2 * N^2 * simplesum(i, 21) == 231    

}

method try(x:Int, y: Int) 
{
    var i: Int
    var N: Int

    assume 0 < i < N;
    // assert 2+2==3

    // assert 22333 * simplesum(0, 2) == 2
    assert powerSum2(0,58) == 66729
    assert simplesum(0, 21) + simplesum(0, 21) + 22 * powerSum2(0,21) - 203 * powerSum2(0,21) == 232  

}method try(x:Int, y: Int) 
{
    var i: Int
    var N: Int
    var j: Int

    assume 0 < i < N;

    // Simple linear summation
    assert simplesum(0, 10) == 55
    assert 2 * simplesum(1, 5) == 30

    // Polynomial summation
    assert powerSum2(0,10) == 385
    assert powerSum3(1,5) == 225

    // Complex inner function
    assert 2 * simplesum(0, 5) + 3 * powerSum2(0,5) == 225
    assert powerSum3(1,3) + 2 * simplesum(1, 3) + (1*(3-1+1)) == 26

    // Edge cases
    assert simplesum(5, 5) == 5
    assert simplesum(10, 0) == 0  // Empty summation

    // Negative coefficients
    assert simplesum(0, 4) - 2 * powerSum2(0,4) == -70

    // Trigonometric (if supported)
    // assert genericSum0(0, 2)) == sin(0) + sin(1) + sin(2)
}
method try(x:Int, y: Int) 
{
    var i: Int
    var N: Int

    assume 0 < i < N;

    // Summation with constants
    assert (2*(4-0+1)) == 10
    assert (5*(3-1+1)) == 15

    // Mixed terms
    assert powerSum2(0,3) + 3 * simplesum(0, 3) + (1*(3-0+1)) == 25
    assert 4 * powerSum2(1,4) - simplesum(1, 4) + (2*(4-1+1)) == 82

    // Large bounds
    assert simplesum(0, 100) == 5050
    assert powerSum2(0,50) == 42925
    assert powerSum3(0,8) == 1296


    // Invalid assertion (for error handling)
    assert simplesum(0, 5) == 100  // Incorrect sum
}

method try() 
{
    var i: Int
    var N: Int
    var z: Int
    var x: Int
    var y: Int


    assume 0 < i < N;

    // Summation with constants
    assert 4 * z  * 3 * (x*(4-0+1)) + (1*(4-0+1)) - genericSum1(0, 4) + simplesum(0, 4) ==
    assert genericSum2(0, 4) ==2

}

method try() 
{
    var i: Int
    var N: Int
    var z: Int
    var x: Int
    var y: Int


    assume 0 < i < N;

    // Summation with constants
    assert 2 * simplesum(0, 4) == simplesum(0, 4) * 2
    assert 2 * simplesum(0, 4) < simplesum(0, 5) * 2
    assert simplesum(0, i) < simplesum(0, i+2)
    assert powerSum2(0,i) < powerSum2(0,i+2)
    assert powerSum2(i+2,N) < powerSum2(i,N)
    assert powerSum2(0,i+2) < powerSum2(0,i) + (i+2)*(i+2) + (i+1)*(i+1)
    assert simplesum(0, 5) == (5*(5-0+1)) - simplesum(0, 5)
    assert simplesum(0, i) == (i*(i-0+1)) - simplesum(0, i)


    // assert false

}
