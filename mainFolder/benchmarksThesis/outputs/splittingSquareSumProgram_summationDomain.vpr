
domain powerSumDomain2 {
// uninterpreted function
function powerSum2(i: Int, N: Int): Int

axiom emptyPowerSum2{
    powerSum2(0,0) == 0
}

axiom iGreaterThanNPowerSum2 {
    forall i:Int, N:Int::
        i > N ==> powerSum2(i,N) == 0
}

axiom rightRecursionPowerSum2 {
    forall i:Int, N: Int :: 
        0 <= i <= N ==> powerSum2(i,N) == powerSum2(i,N-1) + N*N
}

axiom leftRecursionPowerSum2 {
    forall i:Int, N: Int :: 
        0 <= i <= N ==> powerSum2(i,N) == i*i + powerSum2(i+1,N)
}

axiom positiveTermsPowerSum2  {
    forall  i:Int, N: Int :: 
        0 <= i < N ==> powerSum2(i,N) >= i*i
}

axiom largerIndexPowerSum2  {
    forall  i:Int, N: Int, N2: Int :: 
        0 <= i < N < N2 ==> powerSum2(i,N) <= powerSum2(i,N2)
}

axiom indexShiftOnZeroPowerSum2  {
    forall  i:Int, N: Int :: 
        i < 0 < N ==> powerSum2(i,N) == powerSum2(i,0) + powerSum2(0,N)
}

}




