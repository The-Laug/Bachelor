
domain simpleSums {
// uninterpreted function
function simplesum(i: Int, N: Int): Int

axiom emptySum {
    simplesum(0,0) == 0
}

axiom iGreaterThanN  {
    forall i:Int, N:Int::
        i > N ==> simplesum(i,N) == 0
}

axiom rightRecursion  {
    forall i:Int, N: Int :: 
        0 <= i < N ==> simplesum(i,N) == simplesum(i,N-1) + N
}

axiom leftRecursion  {
    forall i:Int, N: Int :: 
        0 <= i < N ==> simplesum(i,N) == i + simplesum(i+1,N)
}

axiom closedForm  {
    forall  N: Int :: 
        simplesum(1,N) == (N*(N+1))/2
}

axiom positiveTerms  {
    forall  i:Int, N: Int :: 
        0 <= i < N ==> simplesum(i,N) >= i
}

axiom largerIndex  {
    forall  i:Int, N: Int, N2: Int :: 
        0 <= i < N < N2 ==> simplesum(i,N) <= simplesum(i,N2)
}

}





    domain setifypower5Sum0 {
    // uninterpreted function
    function setifySumpower5Sum01() : Multiset[Int]

    axiom setifyInSetpower5Sum0 {
        forall i: Int ::
            c<= i <=d ==> (i*i*i*i*i in setifySumpower5Sum01())==1
    }
    
    axiom setifyNotInSetpower5Sum0 {
        forall i : Int ::
            i < c ==> ( (i*i*i*i*i in setifySumpower5Sum01())==0 )
    }

    axiom setifyAlsoNotInSetpower5Sum0 {
        forall i : Int ::
            i > d ==> ( (i*i*i*i*i in setifySumpower5Sum01())==0 )
    }

    }
        
    

    domain setifysimpleSum1 {
    // uninterpreted function
    function setifySumsimpleSum12() : Multiset[Int]

    axiom setifyInSetsimpleSum1 {
        forall j: Int ::
            2<= j <=22 ==> (j in setifySumsimpleSum12())==1
    }
    
    axiom setifyNotInSetsimpleSum1 {
        forall j : Int ::
            j < 2 ==> ( (j in setifySumsimpleSum12())==0 )
    }

    axiom setifyAlsoNotInSetsimpleSum1 {
        forall j : Int ::
            j > 22 ==> ( (j in setifySumsimpleSum12())==0 )
    }

    }
        
    

    domain setifysimpleSum2 {
    // uninterpreted function
    function setifySumsimpleSum23() : Multiset[Int]

    axiom setifyInSetsimpleSum2 {
        forall j: Int ::
            0<= j <=19 ==> (j in setifySumsimpleSum23())==1
    }
    
    axiom setifyNotInSetsimpleSum2 {
        forall j : Int ::
            j < 0 ==> ( (j in setifySumsimpleSum23())==0 )
    }

    axiom setifyAlsoNotInSetsimpleSum2 {
        forall j : Int ::
            j > 19 ==> ( (j in setifySumsimpleSum23())==0 )
    }

    }
        
    

    domain setifysimpleSum3 {
    // uninterpreted function
    function setifySumsimpleSum34() : Multiset[Int]

    axiom setifyInSetsimpleSum3 {
        forall j: Int ::
            20<= j <=25 ==> (j in setifySumsimpleSum34())==1
    }
    
    axiom setifyNotInSetsimpleSum3 {
        forall j : Int ::
            j < 20 ==> ( (j in setifySumsimpleSum34())==0 )
    }

    axiom setifyAlsoNotInSetsimpleSum3 {
        forall j : Int ::
            j > 25 ==> ( (j in setifySumsimpleSum34())==0 )
    }

    }
        
    

    domain setifyconstantSum4 {
    // uninterpreted function
    function setifySumconstantSum45() : Multiset[Int]

    axiom setifyInSetconstantSum4 {
            (2 in setifySumconstantSum45())== 22-0
    }
    
    axiom setifyNotInSetconstantSum4 {
        forall n : Int ::
            n != i ==> ( (i in setifySumconstantSum45())==0 )
    }

    }
    
    
    

    domain setifyconstantSum5 {
    // uninterpreted function
    function setifySumconstantSum56() : Multiset[Int]

    axiom setifyInSetconstantSum5 {
            (2 in setifySumconstantSum56())== 10-0
    }
    
    axiom setifyNotInSetconstantSum5 {
        forall n : Int ::
            n != i ==> ( (i in setifySumconstantSum56())==0 )
    }

    }
    
    
    

    domain setifyconstantSum6 {
    // uninterpreted function
    function setifySumconstantSum67() : Multiset[Int]

    axiom setifyInSetconstantSum6 {
            (2 in setifySumconstantSum67())== 22-10
    }
    
    axiom setifyNotInSetconstantSum6 {
        forall n : Int ::
            n != i ==> ( (i in setifySumconstantSum67())==0 )
    }

    }
    
    
    
