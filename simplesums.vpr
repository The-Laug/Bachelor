// import "examples.vpr"

domain simplesums {
    // uninterpreted function
    function simplesum(i: Int, N: Int): Int

    axiom emptySum{
        simplesum(0,0) == 0
    }
    
    axiom iGreaterThanN {
        forall i:Int, N:Int::
            i > N ==> simplesum(i,N) == 0
    }

    axiom rightRecursion {
        forall i:Int, N: Int :: 
            0 <= i < N ==> simplesum(i,N) == simplesum(i,N-1) + N
    }

    axiom leftRecursion {
        forall i:Int, N: Int :: 
            0 <= i < N ==> simplesum(i,N) == i + simplesum(i+1,N)
    }
    

}


    // axiom closedForm {
    //     forall N: Int :: 
    //         simplesum(0,N) == (N*(N+1))/2
    // }



    // THIS CANT REALLY WORK, because i<N ==> sum(i,N) != 0 but  sum(N,i) ==0 contradiction
    // axiom switchingLimits {
    //     forall i:Int, N: Int :: 
    //         simplesum(i,N) == simplesum(N,i)
    // }



    // axiom ltaxiom {
    //     forall i:Int, N: Int, : Ints,M : Int :: {simplesum(i,N), simplesum(s,M) }
    //         ((0 <= i < N ) && (N < M) && (i < s) && (N-i == M-s)) ==> (simplesum(i,N) <= simplesum(s,M))
    // }




function fac(n: Int): Int 
    requires n >= 0
    ensures result > 0
{
    (n == 0) 
        ? 1
        : n * fac(n-1)
}

// "simplesum(lower, upper, expression)"

method lemma(n: Int, m: Int) 
    requires n >= 0
    requires n < m
    ensures simplesum(n,m) > 0


method foo(x: Int, y: Int)
{
    // simplesum(i=0,n,i) = 0 + 1 + 2 + ... + n   
    assert simplesum(0, 0) == 0 // by "axiom1, axiom2"
    // assert simplesum(0, 1) == 1
    // assert simplesum(0, 2) == 3
    var N :Int
    var i:Int

    // assert simplesum(2,20) == 209
    // assert 2+simplesum(3,20) == simplesum(2,20)
    // assert simplesum(0,N) == (N*(N+1))/2
    // assert simplesum(N, 0) == (N*(N+1))/2
    // assert simplesum(0, N) == 210
    // assert simplesum(0,N) == 0+simplesum(1,N-1)+N
    // assert simplesum(i,N) == i + simplesum(i+1,N)
    // assert simplesum(0,N) == 0 + simplesum(1,N)
    // assert simplesum(0,N) == simplesum(1,N)
    // assert simplesum(i,N) == simplesum(i,N-1)+N
    // assert simplesum(i,N) == i + simplesum(i+1,N)
    //assume N > i+2 was needed below
    // assert i + simplesum((i+1),N) == i + simplesum((i+1),N-1) + N 

    // assert 2+2 == 2*2
    // assert simplesum(i,N) == simplesum(N,i)

    // assume sumexp(0,2,2*n) == 2


    // assert simplesum(0, N) == simplesum(0,i)
    //assert simplesum(0, x) > 0

    // assert SUM1(x,y) == SUM2(N,m)
}


// method TestSumFunction() {
//     // Test cases

//     // Test case 1: Sum from 0 to 2
//     assert simplesum(0, 3) == 0 + simplesum(1, 3);

//     // Test case 2: Sum from 1 to 3
//     assert simplesum(1, 4) == 1 + simplesum(2, 4);

//     // Test case 3: Sum from 0 to 4
//     assert simplesum(0, 5) == 0 + simplesum(1, 5);

//     // Test case 4: Sum from 2 to 5
//     assert simplesum(2, 6) == 2 + simplesum(3, 6);

//     // Test case 5: Sum from 0 to 0
//     assert simplesum(0, 1) == 1;

//     // Test case 6: Sum from 3 to 3
//     assert simplesum(3, 4) == 7;

//     // Test case 7: Sum from 0 to 1
//     assert simplesum(0, 2) == 0 + simplesum(1, 2);

//     // Test case 8: Sum from 0 to 5
//     assert simplesum(0, 6) == 0 + simplesum(1, 6);

//     // Add more test cases as needed
// }
